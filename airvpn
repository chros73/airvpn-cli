#!/usr/bin/python

"""
AirVPN CLI.

Usage: 
    airvpn setup <server-name> [--connect] [--openvpn-dir=DIR]
    airvpn connect <server-name> [--openvpn-dir=DIR]
    airvpn list [--local] [--openvpn-dir=DIR]
    airvpn status <server-name>
    airvpn iptables-persistent [--openvpn-dir=DIR]
    airvpn -h | --help
    airvpn -v | --version

Options:
    -h --help           Show this screen.
    -v --version        Show version.
    --connect           Connect to server after setup.
    --openvpn-dir=DIR   Path to the OpenVPN config directory. [default: /etc/openvpn]
    --local             List servers that are configured.
"""

import os
import shutil
import getpass

from docopt import docopt
from sh import (chown, chmod, openvpn, kill, iptables)
import lxml.html
import requests
import texttable

PID_PATH = '/var/run/openvpn.pid'


def is_root():
    return os.geteuid() == 0


def login():
    """
    Creates a session and logs the user into AirVPN, returning 
    the session on success.
    """
    print "Log in to AirVPN.org"
    print "--------------------"
    username = raw_input('Username: ')
    password = getpass.getpass()

    session = requests.Session()
    response = session.get('https://airvpn.org/')
    
    # grab the csrf token from the login form
    page = lxml.html.fromstring(response.text)
    auth_key = page.get_element_by_id('login').inputs['auth_key'].get('value')

    login_data = { 
        'auth_key': auth_key,
        'referer': 'https://airvpn.org/',
        'ips_username': username,
        'ips_password': password
    }
    
    response = session.post(
        'https://airvpn.org/index.php?app=core&module=global&section=login&do=process',
        data=login_data,
        allow_redirects=False
    )

    # If the login fails, the login page is re-rendered (200 response);
    # if the login succeeds, the user is redirected (302 response)
    if response.status_code == 302:
        return session
    

def get_pid():
    """
    Gets the PID of the currently running OpenVPN daemon process, 
    if any.
    """
    try:
        pid_file = open(PID_PATH, 'r')
    except IOError:
        return None

    return pid_file.read()


def accept_terms():
    """
    Shows the terms of service to the user, and asks for acceptance.
    """
    response = raw_input('Do you agree to the AirVPN Terms of Service at https://airvpn.org/tos/? (yes/no) ')

    if response.lower() != 'yes':
        print 'You must agree to the terms of service to continue.'
        return
    
    second_response = raw_input('Do you explicitly accept points 8, 10 and 11 in the AirVPN Terms of Service at https://airvpn.org/tos/? (yes/no) ')

    if second_response.lower() != 'yes':
        print 'You must accept points 8, 10 and 11 to continue.'
        return 

    return True


def setup(server_name, connect, config_dir):
    """
    Configures an AirVPN server.
    """
    if not is_root():
        print 'This command must be run as root.'
        return

    session = login()
    if not session:
        print 'Login failed.'
        return
    
    print 'Logged in to AirVPN.org'
    print 'Generating configuration...'

    # TODO: Necessary?
    #if not accept_terms: 
    #    return
    
    generator_url = 'https://airvpn.org/generator/'

    response = session.get(generator_url)
    page = lxml.html.fromstring(response.text)
    
    try:
        # get the csrf token from the response
        csrf_token = page.get_element_by_id('generator').inputs['csrf_token'].get('value')
    except:
        print 'Account does not allow config generation. Have you tried giving AirVPN money?'
        return

    config_data = {
        'csrf_token': csrf_token,
        'download_mode': 'list',
        'download_index': 0,
        'system': 'linux',
        'server_pavonis': 'on',
        'proxy_mode': 'none',
        'fileprefix': '',
        'customdirectives': '',
        'mode_1': 'on',
        'tosaccept': 'on',
        'tosaccept2': 'on'
    }

    response = session.post(generator_url, data=config_data)
    
    config_path = os.path.join(config_dir, server_name + '.ovpn')

    # write config file to the openvpn config directory
    config_file = open(config_path, 'w')
    config_file.write(response.text)
    config_file.close()

    try:
        # set root ownership and exclusive rw permissions
        chown('root', config_path)
        chmod('600', config_path)
    except:
        print 'Setting permissions on configuration file failed.'
        return

    print '%s server configured.' % server_name.capitalize()

    if connect:
        connect(server_name, config_dir)


def connect(server_name, config_dir):
    """
    Connects to a configured AirVPN server.
    """
    if not is_root():
        print 'This command must be run as root.'
        return
    
    pid = get_pid()
    if pid:
        'Shutting down OpenVPN daemon...'
        try:
            kill(pid)
        except:
            print 'Unable to shut down existing OpenVPN daemon process.'
            return

    print 'Starting OpenVPN daemon with %s configuration...' % server_name
    config_path = os.path.join(config_dir, server_name + '.ovpn')
        
    try:
        openvpn('--config', os.path.abspath(config_path), '--writepid', PID_PATH, daemon=True)
    except:
        print 'Failed to start OpenVPN daemon.'


def list_remote_servers():
    """
    Lists the names and locations of all available AirVPN servers.
    """
    response = requests.get('https://airvpn.org/status/')

    if response.status_code == 200:
        page = lxml.html.fromstring(response.text)

        server_boxes = page.xpath('//div[@class="air_server_box_1"]')
        
        server_table = texttable.Texttable()
        server_table.header(['Server Name', 'Location'])
        server_table.set_cols_width([12, 40])
        server_table.set_deco(server_table.HEADER | server_table.VLINES)

        for box in server_boxes:
            name = box.xpath('div[1]/div[1]/div[1]/text()')[0].strip()
            country = box.xpath('div[1]/div[2]/text()')[0].strip()
            city_state = box.xpath('div[1]/div[2]/span/text()')[0].strip()
            server_table.add_row([name, '%s, %s' % (city_state, country)])
        
        print server_table.draw()
    else:
        print 'Loading server list failed.'


def list_local_servers(config_dir):
    """
    Lists the names of all locally configured servers. 
    """
    for root, dirs, files in os.walk(os.path.abspath(config_dir)):
        for _file in files:
            if _file.endswith('.ovpn'):
                print _file.split('.')[0].capitalize()


def status(server_name):
    """
    Displays the status (bandwidth, # users connected) of the specified 
    AirVPN server.
    """
    response = requests.get('https://airvpn.org/status/')
    
    if response.status_code == 200:
        page = lxml.html.fromstring(response.text)

        server_boxes = page.xpath('//div[@class="air_server_box_1"]')

        for box in server_boxes:
            name = box.xpath('div[1]/div[1]/div[1]/text()')[0].strip().lower()
            if name == server_name:
                bandwidth = box.xpath('div[2]/div[1]/div[1]/div[2]/text()')[0].strip()
                users = box.xpath('div[2]/div[1]/span/text()')[0].strip()
                print '%s' % name.capitalize()
                print "--------------------"
                print 'Bandwidth: %s' % bandwidth
                print 'Users: %s' % users
                break
        else:
            print 'Server not found.'
    else:
        print 'Loading server list failed.'


def iptables_persistent(config_dir):
    """
    Outputs rules for blocking non-VPN traffic in the form used by 
    iptables-persistent.
    """
    print 'implement me?'


def main(args):
    if args['setup']:
        setup(args['<server-name>'],
              args['--connect'],
              args['--openvpn-dir'])
    elif args['connect']:
        connect(args['<server-name>'],
                args['--openvpn-dir'])
    elif args['list']:
        if args['--local']:
            list_local_servers(args['--openvpn-dir'])
        else:
            list_remote_servers()
    elif args['status']:
        status(args['<server-name>'])
    elif args['iptables_persistent']:
        iptables_persistent(args['--openvpn-dir'])


if __name__ == '__main__':
    args = docopt(__doc__, version='AirVPN CLI v1.0.0')
    main(args)
